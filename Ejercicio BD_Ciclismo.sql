-- 1º Ejecutar:


DECLARE
	TYPE array_t IS VARRAY(5) OF VARCHAR2(20);
	table_names array_t := array_t('CI_CICLISTA', 'CI_EQUIPO', 'CI_CARRERA', 'CI_ETAPA', 'CI_PARTICIPAR');
	existe NUMBER := 0;
	v_sql1 VARCHAR2(1000);
	v_sql2 VARCHAR2(1000);
	v_sql3 VARCHAR2(1000);
	v_sql4 VARCHAR2(1000);
	v_sql5 VARCHAR2(1000);

BEGIN
    FOR i IN 1..table_names.COUNT LOOP
        BEGIN
            BEGIN
                SELECT 1 into existe FROM user_tables WHERE table_name = table_names(i) AND ROWNUM = 1;
            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    existe := 0;
            END;

            CASE
                WHEN existe = 0 THEN
                    DBMS_OUTPUT.PUT_LINE('La tabla ' || table_names(i) || ' no existe.');
                WHEN existe = 1 THEN
                    EXECUTE IMMEDIATE 'DROP TABLE ' || table_names(i) || ' CASCADE CONSTRAINTS';
                    DBMS_OUTPUT.PUT_LINE('La tabla ' || table_names(i) || ' ha sido eliminada.');
            END CASE;
        END;
    END LOOP;

    v_sql1 := 'create table CI_EQUIPO (
				ID_EQUIPO number generated by default on null as identity,
				NOMBRE    varchar2(255) not null,
				constraint EQUIPO_PK primary key ( ID_EQUIPO )
			)';    
			
    v_sql2 := 'create table CI_CICLISTA (
				ID_CICLISTA number generated by default on null as identity,
				ID_EQUIPO   number,
				NOMBRE      varchar2(255) not null,
				constraint CICLISTA_PK primary key ( ID_CICLISTA ),
				constraint CICLISTA_EQUIPO_FK foreign key ( ID_EQUIPO ) references CI_EQUIPO ( ID_EQUIPO )
			)';

	v_sql3 := 'create table CI_CARRERA (
				ID_CARRERA number generated by default on null as identity,
				NOMBRE    varchar2(255) not null,
				constraint CARRERA_PK primary key ( ID_CARRERA )
			)';

	v_sql4 := 'create table CI_ETAPA (
				ID_ETAPA number,
				ID_CARRERA number,
				NOMBRE    varchar2(255) not null,
				constraint ETAPA_PK primary key (ID_ETAPA,ID_CARRERA),
				CONSTRAINT ETAPA_CARRERA_FK FOREIGN KEY (ID_CARRERA) REFERENCES CI_CARRERA (ID_CARRERA)
			)';

	v_sql5 := 'CREATE TABLE CI_PARTICIPAR (	
				ID_CICLISTA NUMBER, 
				ID_CARRERA NUMBER, 
				ID_ETAPA NUMBER, 
				POSICION NUMBER,
				P_MONTANA NUMBER,
				P_REGULARIDAD NUMBER,
				CONSTRAINT PARTICIPAR_PK PRIMARY KEY (ID_CICLISTA, ID_CARRERA, ID_ETAPA),
				CONSTRAINT PARTICIPAR_CICLISTA_FK FOREIGN KEY (ID_CICLISTA) REFERENCES CI_CICLISTA (ID_CICLISTA),
				CONSTRAINT PARTICIPAR_ETAPA_FK FOREIGN KEY (ID_CARRERA, ID_ETAPA) REFERENCES CI_ETAPA (ID_CARRERA, ID_ETAPA)
	)';

    EXECUTE IMMEDIATE v_sql1;
    EXECUTE IMMEDIATE v_sql2;
    EXECUTE IMMEDIATE v_sql3;
    EXECUTE IMMEDIATE v_sql4;
    EXECUTE IMMEDIATE v_sql5;
END;



-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


-- 2º Ejecutar:



BEGIN
	INSERT INTO CI_CARRERA (ID_CARRERA, NOMBRE) VALUES (1,'VUELTA A MURCIA');
	INSERT INTO CI_CARRERA (ID_CARRERA, NOMBRE) VALUES (2,'VUELTA A COM. VALENCIANA');
	INSERT INTO CI_EQUIPO (ID_EQUIPO, NOMBRE) VALUES (1,'JUMBO-VISTA');
	INSERT INTO CI_EQUIPO (ID_EQUIPO, NOMBRE) VALUES (2,'MOVISTAR TEAM');
	INSERT INTO CI_EQUIPO (ID_EQUIPO, NOMBRE) VALUES(3,'UAE');
	INSERT INTO CI_EQUIPO (ID_EQUIPO, NOMBRE) VALUES (4,'BORA');
	INSERT INTO CI_EQUIPO (ID_EQUIPO, NOMBRE) VALUES (5,'QUICK STEP');
	INSERT INTO CI_EQUIPO (ID_EQUIPO, NOMBRE) VALUES (6,'ALPECIN');
	INSERT INTO CI_CICLISTA (ID_CICLISTA, ID_EQUIPO, NOMBRE) VALUES (1,1,'WOUT VAN AERT');
	INSERT INTO CI_CICLISTA (ID_CICLISTA, ID_EQUIPO, NOMBRE) VALUES (2,2,'ENRIC MAS');
	INSERT INTO CI_CICLISTA (ID_CICLISTA, ID_EQUIPO, NOMBRE) VALUES (3,3,'TADEJ POGAÇAR');
	INSERT INTO CI_CICLISTA (ID_CICLISTA, ID_EQUIPO, NOMBRE) VALUES (4,4,'PRIMOZ ROGLIC');
	INSERT INTO CI_CICLISTA (ID_CICLISTA, ID_EQUIPO, NOMBRE) VALUES (5,5,'REMCO EVENEPOEL');
	INSERT INTO CI_CICLISTA (ID_CICLISTA, ID_EQUIPO, NOMBRE) VALUES (6,6,'MATHIEU VAN DER POEL');
	INSERT INTO CI_CICLISTA (ID_CICLISTA, ID_EQUIPO, NOMBRE) VALUES (7,5,'MIKEL LANDA');
	INSERT INTO CI_ETAPA (ID_ETAPA, ID_CARRERA, NOMBRE) VALUES (1,1, 'ETAPA 1');
	INSERT INTO CI_ETAPA (ID_ETAPA, ID_CARRERA, NOMBRE) VALUES (2,1, 'ETAPA 2');
	INSERT INTO CI_ETAPA (ID_ETAPA, ID_CARRERA, NOMBRE) VALUES (3,1, 'ETAPA 3');
	INSERT INTO CI_ETAPA (ID_ETAPA, ID_CARRERA, NOMBRE) VALUES (1,2, 'ETAPA 1');
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (1,1,1,22,16,22);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (2,1,1,1,3,15);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (3,1,1,5,12,25);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (4,1,1,6,4,30);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (5,1,1,3,18,27);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (6,1,1,2,2,12);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (1,1,2,22,10,21);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (2,1,2,16,11,0);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (3,1,2,50,12,25);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (4,1,2,16,3,22);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (5,1,2,3,14,12);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (6,1,2,1,11,10);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (1,1,3,1,22,21);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (2,1,3,16,11,0);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (3,1,3,32,44,25);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (4,1,3,2,2,22);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (5,1,3,3,0,12);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (6,1,3,1,1,10);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (1,2,1,2,6,25);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (2,2,1,1,0,30);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (3,2,1,4,12,15);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (4,2,1,5,4,10);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (5,2,1,3,18,22);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (6,2,1,6,2,2);
	INSERT INTO CI_PARTICIPAR (ID_CICLISTA, ID_CARRERA, ID_ETAPA, POSICION, P_MONTANA, P_REGULARIDAD) VALUES (7,2,1,12,1,2);
END





-- ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||




-- Dado el siguiente esquema de entidad relación:

-- y el fichero proporcionado bd_ciclismo.sql, realiza los siguientes ejercicios:


-- 1. Crea un procedimiento (registrar_ciclista) que registre un nuevo ciclista. Si el equipo
-- del ciclista no existe lanza una excepción o un mensaje de error que lo indique.




CREATE OR REPLACE PROCEDURE registrar_ciclista (P_ID_CICLISTA NUMBER, P_ID_EQUIPO NUMBER, P_NOMBRE VARCHAR2) IS

    V_ID_COMPARAR NUMBER;
    EQUIPO_NO_EXISTE EXCEPTION;

BEGIN 

    SELECT COUNT(*) 
    INTO V_ID_COMPARAR
    FROM CI_EQUIPO
    WHERE ID_EQUIPO = P_ID_EQUIPO;

    IF V_ID_COMPARAR = 0 THEN

        RAISE EQUIPO_NO_EXISTE;

    END IF;

    INSERT INTO CI_CICLISTA (ID_CICLISTA, ID_EQUIPO, NOMBRE) 
    VALUES (P_ID_CICLISTA, P_ID_EQUIPO, P_NOMBRE);

EXCEPTION

    WHEN EQUIPO_NO_EXISTE THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: El equipo no existe.');


END;





-- 2. Crear un procedimiento que se llame crear_carrera y las etapas asociadas a esa
-- carrera en base a un parámetro llamado n_etapas.
	
	--a. Crear una carrera que se llame Paris-Niza con 5 etapas



CREATE OR REPLACE PROCEDURE CREAR_CARRERA(P_NOMBRE_CARRERA IN VARCHAR2, P_N_ETAPAS IN NUMBER) AS
    V_ID_CARRERA NUMBER;
    V_ID_ETAPA NUMBER;
BEGIN
    INSERT INTO CI_CARRERA (NOMBRE) 
    VALUES (P_NOMBRE_CARRERA) 
    RETURNING ID_CARRERA INTO V_ID_CARRERA;
    
    FOR I IN 1..P_N_ETAPAS LOOP
        V_ID_ETAPA := I;
        INSERT INTO CI_ETAPA (ID_ETAPA, ID_CARRERA, NOMBRE)
        VALUES (V_ID_ETAPA, V_ID_CARRERA, 'Etapa ' || I);
    END LOOP;
    
    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Carrera ' || P_NOMBRE_CARRERA || ' con ' || P_N_ETAPAS || ' etapas ha sido creada.');
    
END;





-- 3. Modificar la tabla participar y añadir las siguientes columnas

	-- a. Horas, minutos y segundos




ALTER TABLE CI_PARTICIPAR ADD (HORAS NUMBER, MINUTOS NUMBER, SEGUNDOS NUMBER);







-- 4. Crear un procedimiento que simule las posiciones de todos los ciclistas de la base
-- de datos en todas las etapas de Paris-Niza.


CREATE OR REPLACE PROCEDURE SIMULACION AS
   
CURSOR c_ciclistas IS

        SELECT ID_CICLISTA, ID_CARRERA, ID_ETAPA
        FROM CI_PARTICIPAR
        WHERE ID_CARRERA = (SELECT ID_CARRERA FROM CI_CARRERA WHERE NOMBRE = 'Paris-Niza');

v_posicion NUMBER;


BEGIN
    FOR ciclista IN c_ciclistas LOOP

        v_posicion := FLOOR(DBMS_RANDOM.VALUE(1, 101));

        UPDATE CI_PARTICIPAR
        SET POSICION = v_posicion
        WHERE ID_CICLISTA = ciclista.ID_CICLISTA
          AND ID_CARRERA = ciclista.ID_CARRERA
          AND ID_ETAPA = ciclista.ID_ETAPA;

    END LOOP;

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Posiciones de los ciclistas en la carrera Paris-Niza han sido simuladas.');

END;





-- 5. Crear un procedimiento que actualice la posición en la etapa de los ciclistas en base
-- al tiempo asignado anteriormente.

CREATE OR REPLACE PROCEDURE ACTUALIZA_TIEMPO AS

    CURSOR C_ETAPAS IS

        SELECT E.ID_CARRERA, E.ID_ETAPA
        FROM CI_ETAPA E
        JOIN CI_CARRERA C ON C.ID_CARRERA = E.ID_CARRERA
        WHERE C.NOMBRE = 'PARIS-NIZA';

    CURSOR C_PARTICIPANTES(P_ID_CARRERA IN NUMBER, P_ID_ETAPA IN NUMBER) IS

        SELECT ID_CICLISTA, HORAS, MINUTOS, SEGUNDOS
        FROM CI_PARTICIPAR
        WHERE ID_CARRERA = P_ID_CARRERA
          AND ID_ETAPA = P_ID_ETAPA
        ORDER BY HORAS, MINUTOS, SEGUNDOS;

    V_POSICION NUMBER := 1;

BEGIN

    FOR ETAPA_RECORD IN C_ETAPAS LOOP

        FOR PARTICIPANTE_RECORD IN C_PARTICIPANTES(ETAPA_RECORD.ID_CARRERA, ETAPA_RECORD.ID_ETAPA) LOOP

            UPDATE CI_PARTICIPAR
            SET POSICION = V_POSICION
            WHERE ID_CICLISTA = PARTICIPANTE_RECORD.ID_CICLISTA
              AND ID_CARRERA = ETAPA_RECORD.ID_CARRERA
              AND ID_ETAPA = ETAPA_RECORD.ID_ETAPA;

            V_POSICION := V_POSICION + 1;

        END LOOP;

    END LOOP;

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Posiciones de los ciclistas actualizadas en todas las etapas de Paris-Niza.');

END;






-- 6. Generar un procedimiento que muestre la clasificación general por tiempos
-- (clasificación_general) de una carrera que se pase por parámetro.

	-- a. Rafael Macarrón Xh:Xm:Xs
	-- b. Claudio Chiapucci +1m:30s
	-- c. Salvatore Comesso +3m:10s


CREATE OR REPLACE PROCEDURE CLASIFICACION_GENERAL (P_NOMBRE_CARRERA IN VARCHAR2) AS
    
    CURSOR C_CICLISTAS IS

        SELECT P.ID_CICLISTA, P.HORAS, P.MINUTOS, P.SEGUNDOS, C.NOMBRE AS CICLISTA
        FROM CI_PARTICIPAR P
        JOIN CI_CICLISTA C ON P.ID_CICLISTA = C.ID_CICLISTA
        JOIN CI_CARRERA R ON P.ID_CARRERA = R.ID_CARRERA
        WHERE R.NOMBRE = P_NOMBRE_CARRERA
        ORDER BY P.HORAS, P.MINUTOS, P.SEGUNDOS;

    V_TIEMPO_TOTAL_HOURS NUMBER := 0;
    V_TIEMPO_TOTAL_MINUTES NUMBER := 0;
    V_TIEMPO_TOTAL_SECONDS NUMBER := 0;
    V_PREV_CICLISTA_TIME NUMBER := 0;
    V_DIFFERENCE NUMBER := 0;


BEGIN

    FOR CICLISTA_RECORD IN C_CICLISTAS LOOP

        V_TIEMPO_TOTAL_HOURS := V_TIEMPO_TOTAL_HOURS + CICLISTA_RECORD.HORAS;
        V_TIEMPO_TOTAL_MINUTES := V_TIEMPO_TOTAL_MINUTES + CICLISTA_RECORD.MINUTOS;
        V_TIEMPO_TOTAL_SECONDS := V_TIEMPO_TOTAL_SECONDS + CICLISTA_RECORD.SEGUNDOS;


        IF V_TIEMPO_TOTAL_SECONDS >= 60 THEN
            
            V_TIEMPO_TOTAL_MINUTES := V_TIEMPO_TOTAL_MINUTES + (V_TIEMPO_TOTAL_SECONDS / 60);
            V_TIEMPO_TOTAL_SECONDS := MOD(V_TIEMPO_TOTAL_SECONDS, 60);
        
        END IF;

        IF V_TIEMPO_TOTAL_MINUTES >= 60 THEN
            
            V_TIEMPO_TOTAL_HOURS := V_TIEMPO_TOTAL_HOURS + (V_TIEMPO_TOTAL_MINUTES / 60);
            V_TIEMPO_TOTAL_MINUTES := MOD(V_TIEMPO_TOTAL_MINUTES, 60);
        
        END IF;

        IF V_PREV_CICLISTA_TIME > 0 THEN
          
            V_DIFFERENCE := V_TIEMPO_TOTAL_HOURS - V_PREV_CICLISTA_TIME;
            DBMS_OUTPUT.PUT_LINE(CICLISTA_RECORD.CICLISTA || ' +' || V_DIFFERENCE || 'm' || TO_CHAR(V_TIEMPO_TOTAL_SECONDS, 'FM00') || 's');
       
        ELSE

            DBMS_OUTPUT.PUT_LINE(CICLISTA_RECORD.CICLISTA || ' ' || TO_CHAR(V_TIEMPO_TOTAL_HOURS, 'FM00') || ':' || TO_CHAR(V_TIEMPO_TOTAL_MINUTES, 'FM00') || ':' || TO_CHAR(V_TIEMPO_TOTAL_SECONDS, 'FM00'));
    
        END IF;

        V_PREV_CICLISTA_TIME := V_TIEMPO_TOTAL_HOURS;

    END LOOP;
END;







-- 7. Generar un procedimiento que muestre la clasificación de la montaña



CREATE OR REPLACE PROCEDURE CLASIFICACION_MONTANA (P_NOMBRE_CARRERA IN VARCHAR2) AS

    CURSOR C_CICLISTAS_MONTANA IS

        SELECT C.NOMBRE AS CICLISTA, SUM(P.P_MONTANA) AS PUNTOS_MONTANA
        FROM CI_PARTICIPAR P
        JOIN CI_CICLISTA C ON P.ID_CICLISTA = C.ID_CICLISTA
        JOIN CI_CARRERA R ON P.ID_CARRERA = R.ID_CARRERA
        WHERE R.NOMBRE = P_NOMBRE_CARRERA
        GROUP BY C.NOMBRE
        ORDER BY PUNTOS_MONTANA DESC;

BEGIN

    FOR CICLISTA_RECORD IN C_CICLISTAS_MONTANA LOOP

        DBMS_OUTPUT.PUT_LINE(CICLISTA_RECORD.CICLISTA || ' ' || CICLISTA_RECORD.PUNTOS_MONTANA || ' puntos');
    
    END LOOP;
END;






-- 8. Generar un procedimiento que muestre la clasificación de la regularidad



CREATE OR REPLACE PROCEDURE CLASIFICACION_DE_LA_REGULARIDAD (P_NOMBRE_CARRERA IN VARCHAR2) AS
    
    CURSOR C_CICLISTAS_REGULARIDAD IS
        
        SELECT C.NOMBRE AS CICLISTA, SUM(P.P_REGULARIDAD) AS PUNTOS_REGULARIDAD
        FROM CI_PARTICIPAR P
        JOIN CI_CICLISTA C ON P.ID_CICLISTA = C.ID_CICLISTA
        JOIN CI_CARRERA R ON P.ID_CARRERA = R.ID_CARRERA
        WHERE R.NOMBRE = P_NOMBRE_CARRERA
        GROUP BY C.NOMBRE
        ORDER BY PUNTOS_REGULARIDAD DESC;

BEGIN

    FOR CICLISTA_RECORD IN C_CICLISTAS_REGULARIDAD LOOP
     
        DBMS_OUTPUT.PUT_LINE(CICLISTA_RECORD.CICLISTA || ' ' || CICLISTA_RECORD.PUNTOS_REGULARIDAD || ' puntos');
   
    END LOOP;

END;


